
-- These are global, but when running in a tee'd vm they will only 
--   be global to the game vm. 

local tcpserve  = require("app.dataserver")
local url       = require("lua.url")
local json      = require("lua.json")
local utils     = require("lua.utils")

-- /user/login?userid={name}&uid={device_uid}

-- Database mapping:
--  unique_user_id -> userdata { uid, userid, username, loginstate, session, idletimeout }
--  uid is primary key (device id) but userid must be unique too. username (display) can be anything.

--  uid is generate by device
--  userid is provided or generated by server - provided is useful for google id etc later
--  username is display name
--  loginstate is the current status of the use - online, playing, disconnected, etc
--  session is the id for the current user session information (if needed by server)
--  idletimeout is set by server so if exceeded, the user is kicked if there has been no data sent/recv

api_userLogin = function( client, req, res )

    local header =  req.headers
    local outjson = json.encode( { data = nil, status = "Error: Invalid login." } )

    if(header["UserId"] and header["DeviceId"]) then 

        -- This is effectively the bearertoken for the session. Will be sent with all further requests
        local unique_user_id = tcpserve.loginUser(header["UserId"], header["DeviceId"])

        print("[userLogin] User: ", header["UserId"], "  Device: ", header["DeviceId"])
        outjson = json.encode( { uuid = unique_user_id, status = "OK" } )
    end
    return outjson
end 